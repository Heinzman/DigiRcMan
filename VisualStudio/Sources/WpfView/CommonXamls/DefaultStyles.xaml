<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:WpfControls="clr-namespace:Heinzman.WpfControls;assembly=WpfControls">

    <!--Colors and Brushes -->

    <Color x:Key="VeryLightColor">
        #C2D9FF
    </Color>

    <Color x:Key="VeryVeryLightColor">
        #DBE9FF
    </Color>

    <Color x:Key="LightColor">
        #A8CAFF
    </Color>

    <Color x:Key="VeryVeryLightInactiveColor">
        #15000000
    </Color>

    <Color x:Key="VeryLightInactiveColor">
        #1E000000
    </Color>

    <Color x:Key="LightInactiveColor">
        #48000000
    </Color>

    <Color x:Key="SolidColor">
        #8FBAFF
    </Color>

    <Color x:Key="DarkColor">
        #FF1F2831
    </Color>

    
    <RadialGradientBrush x:Key="RadialHorizBrush" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
        <GradientStop Color="{StaticResource VeryLightColor}" Offset="0" />
        <GradientStop Color="{StaticResource LightColor}" Offset="1" />
    </RadialGradientBrush>

    <RadialGradientBrush x:Key="InactiveRadialHorizBrush" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
        <GradientStop Color="{StaticResource VeryLightInactiveColor}" Offset="0" />
        <GradientStop Color="{StaticResource LightInactiveColor}" Offset="1" />
    </RadialGradientBrush>

    <RadialGradientBrush x:Key="InactiveRadialHorizLightBrush" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
        <GradientStop Color="{StaticResource VeryVeryLightInactiveColor}" Offset="0" />
        <GradientStop Color="{StaticResource VeryLightInactiveColor}" Offset="1" />
    </RadialGradientBrush>

    <RadialGradientBrush x:Key="RadialVertBrush" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
        <GradientStop Color="{StaticResource VeryLightColor}" Offset="0" />
        <GradientStop Color="{StaticResource LightColor}" Offset="1" />
    </RadialGradientBrush>

    <RadialGradientBrush x:Key="RadialVertLightBrush" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
        <GradientStop Color="{StaticResource VeryVeryLightColor}" Offset="0" />
        <GradientStop Color="{StaticResource VeryLightColor}" Offset="1" />
    </RadialGradientBrush>

    <SolidColorBrush x:Key="VeryLightColorBrush" Color="{StaticResource VeryLightColor}" />

    <SolidColorBrush x:Key="LightColorBrush" Color="{StaticResource LightColor}" />

    <SolidColorBrush x:Key="VeryLightInactiveColorBrush" Color="{StaticResource VeryLightInactiveColor}" />

    <SolidColorBrush x:Key="LightInactiveColorBrush" Color="{StaticResource LightInactiveColor}" />

    <SolidColorBrush x:Key="SolidColorBrush" Color="{StaticResource SolidColor}" />

    <SolidColorBrush x:Key="DarkColorBrush" Color="{StaticResource DarkColor}" />

    <!-- Styles -->
    <Style x:Key="baseControlStyle"
            TargetType="{x:Type Control}">
        <Setter Property="FontFamily"
                Value="Arial" />
        <Setter Property="FontSize"
                Value="11" />
        <Setter Property="Margin"
                Value="1" />
    </Style>

    <Style x:Key="baseControlStyleLeftAligned" TargetType="{x:Type Control}" BasedOn="{StaticResource baseControlStyle}">
        <Setter Property="HorizontalAlignment"
                Value="Left" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
    </Style>

    <Style x:Key="baseControlStyleStretchAligned" TargetType="{x:Type Control}" BasedOn="{StaticResource baseControlStyle}">
        <Setter Property="HorizontalAlignment"
                Value="Stretch" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
    </Style>

    <Style x:Key="baseControlStyleRightAligned" TargetType="{x:Type Control}" BasedOn="{StaticResource baseControlStyle}">
        <Setter Property="HorizontalAlignment"
                Value="Stretch" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
    </Style>

    <Style TargetType="{x:Type GroupBox}"
            BasedOn="{StaticResource baseControlStyle}">
        <Setter Property="Margin"
                Value="4" />
        <Setter Property="BorderThickness"
                Value="2" />
    </Style>

    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource baseControlStyleStretchAligned}">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{StaticResource LightColor}"/>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                        Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource baseControlStyleStretchAligned}">
        <Setter Property="WpfControls:SelectAllOnFocusTextBoxBehavior.SelectAllTextOnFocus" Value="True"/>
        <Setter Property="WpfControls:CommitEditOnChangeTextBoxBehavior.CommitEditOnChange" Value="True"/>
        <Setter Property="SelectionBrush" Value="{StaticResource SolidColorBrush}"/>
        <Setter Property="SelectionOpacity" Value="0.5"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                        Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type GridSplitter}" BasedOn="{StaticResource baseControlStyle}">
        <Setter Property="Background" Value="{StaticResource RadialHorizBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource SolidColorBrush}" />
    </Style>
    
    <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource baseControlStyleLeftAligned}" />

    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource baseControlStyleLeftAligned}" />
    
    <Style TargetType="{x:Type DatePicker}" BasedOn="{StaticResource baseControlStyleLeftAligned}" />

    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource baseControlStyleRightAligned}" />

    <Style x:Key="ColoredTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource DarkColorBrush}" />
    </Style>

    <Style TargetType="{x:Type Menu}">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{StaticResource LightColor}"/>
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type ContextMenu}">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{StaticResource LightColor}"/>
        </Style.Resources>
    </Style>

    <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <TextBlock Name="TheBGControl">
                        <ContentPresenter />
                    </TextBlock>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{StaticResource LightColorBrush}" TargetName="TheBGControl" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="Yellow"/>
            </Trigger>
        </Style.Triggers>   
    </Style>
    
    <Style x:Key="DataGridCellAlignRight" TargetType="DataGridCell">
        <Setter Property="Control.HorizontalAlignment" Value="Right" />
    </Style>

    <Style x:Key="DisabledImage" TargetType="Image">
        <Setter Property="Control.IsEnabled" 
                    Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}, AncestorLevel=1},Path=IsEnabled}" />
        <Style.Triggers>
            <Trigger Property="Control.IsEnabled" Value="False">
                <Setter Property="Control.Opacity" Value="0.3"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToggleButtonStyle1" TargetType="ToggleButton" >
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock TextWrapping="Wrap" Text="{Binding}"></TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <System:String x:Key="InfoBarMessageControlText">Folgende Fehler/Warnungen sind vorhanden:</System:String>
    
    <!-- Detail Expander -->
    <SolidColorBrush x:Key="DetailExpanderHeaderBorderBrush" Color="Black"/>
    <SolidColorBrush x:Key="DetailExpanderContentBorderBrush" Color="Black" />
    <SolidColorBrush x:Key="DetailExpanderHeaderTextBrush" Color="Black" />
    <SolidColorBrush x:Key="DetailExpanderControlNormalForegroundBrush" Color="White" />
    <SolidColorBrush x:Key="DetailExpanderControlDisabledForegroundBrush" Color="DarkGray" />
    <SolidColorBrush x:Key="DetailExpanderControlDisabledBackgroundBrush" Color="LightGray" />
    <SolidColorBrush x:Key="DetailExpanderControlDisabledBorderBrush" Color="LightGray" />
    <SolidColorBrush x:Key="ExpanderToggleButtonBackgroundBrush" Color="White" />
    <SolidColorBrush x:Key="ExpanderToggleButtonMouseOverFillBrush" Color="{StaticResource SolidColor}" />
    <SolidColorBrush x:Key="ExpanderToggleButtonPressedFillBrush" Color="{StaticResource LightColor}" />

    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="ToggleButton">

        <!-- Note, the chevron toggle button gets its forground color from the templated parent.
             The parent must set this to a valid color when it is disabled. -->

        <Path 
			Name="Chevron"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Data="M 0 0 L 10 10 L 20 0 Z"
            Fill="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}"
            />

        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Chevron" Property="Data" Value="M 0 10 L 10 0 L 20 10 Z" />
            </Trigger>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Chevron" Property="Fill" Value="{StaticResource ExpanderToggleButtonMouseOverFillBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="Chevron" Property="Fill" Value="{StaticResource ExpanderToggleButtonPressedFillBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
   
    <Style x:Key="DetailViewExpander" TargetType="Expander">
        <Setter Property="Foreground" Value="{StaticResource DetailExpanderControlNormalForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Name="ContentRow" Height="0"/>
                        </Grid.RowDefinitions>
                        <Border 
                                Name="HeaderBorder" 
                                Grid.Row="0" 
                                BorderThickness="1" 
                                CornerRadius="0,0,0,0" 
                                BorderBrush="{StaticResource DetailExpanderHeaderBorderBrush}"
                                Background="{StaticResource RadialVertLightBrush}"
                                >

                            <Grid >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="20" />
                                </Grid.ColumnDefinitions>

                                <ContentPresenter 
                                        Grid.Column="0"
                                        Margin="4" 
                                        ContentSource="Header" 
                                        RecognizesAccessKey="True" 
                                        />
                                <ToggleButton 
                                        Grid.Column="1"
                                        IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                        OverridesDefaultStyle="True" 
                                        Template="{StaticResource ExpanderToggleButton}" 
                                        Background="{StaticResource ExpanderToggleButtonBackgroundBrush}" 
                                        />
                            </Grid>
                        </Border>

                        <Border 
                                Name="ContentBorder" 
                                Grid.Row="1" 
                                BorderBrush="{StaticResource DetailExpanderContentBorderBrush}" 
                                BorderThickness="1,0,1,1" 
                                CornerRadius="0,0,0,0" 
                                >
                            <ContentPresenter Margin="4" />

                        </Border>
                    </Grid>

                    <!-- Triggers for the entire Expander Control -->
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content, Path=DesiredHeight}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource DetailExpanderControlDisabledForegroundBrush}"/>
                            <Setter TargetName="HeaderBorder" Property="Background" Value="{StaticResource DetailExpanderControlDisabledBackgroundBrush}" />
                            <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{StaticResource DetailExpanderControlDisabledBorderBrush}" />
                            <Setter TargetName="ContentBorder" Property="BorderBrush" Value="{StaticResource DetailExpanderControlDisabledBorderBrush}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" 
				                Foreground="{StaticResource DetailExpanderHeaderTextBrush}" 
				                FontSize="12" 
				                FontWeight="Normal"
                               HorizontalAlignment="Center" />
                </DataTemplate>
            </Setter.Value>
        </Setter>

    </Style>

</ResourceDictionary>